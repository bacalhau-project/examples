# Event Puller justfile
# Usage: 
# - just build_binary           # Build the binary
# - just run_binary             # Run the binary locally
# - just build_container        # Build the Docker container
# - just run_container          # Run the Docker container

# Default variables
registry := "ghcr.io"
organization := "bacalhau-project"
image_name := "event-puller"
timestamp := `date +%Y%m%d%H%M`
host_port := "8080"
container_port := "8080"
env_file := ".env"  # Default env file path
debug := "false"    # Set to "true" for verbose debugging

# Build the Go binary
build_binary:
    @echo "🛠️  Building event-puller binary..."
    @mkdir -p bin
    go build -o bin/event-puller
    @echo "✅ Binary built at bin/event-puller"

# Run the binary locally with environment variables from .env file
# Usage:
#   just run_binary                      # Use default .env file
#   just env_file=custom.env run_binary  # Use custom env file
run_binary:
    @echo "🚀 Running event-puller locally..."
    just build_binary
    @if [ ! -f "{{env_file}}" ]; then \
        if [ "{{env_file}}" = ".env" ] && [ -f ".env.example" ]; then \
            echo "⚠️  No {{env_file}} file found. Using .env.example as a template..."; \
            cp .env.example {{env_file}}; \
            echo "⚠️  Please edit {{env_file}} file with your actual credentials"; \
        else \
            echo "❌ Environment file {{env_file}} not found and no template available"; \
            exit 1; \
        fi; \
    fi
    @echo "📋 Press Ctrl+C to stop"
    @echo "📄 Using environment file: {{env_file}}"
    ENV_FILE={{env_file}} ./bin/event-puller

# Build the container
build_container:
    #!/usr/bin/env bash
    set -euo pipefail

    # Create a new builder instance if it doesn't exist
    docker buildx create --name event-puller-builder --driver docker-container --bootstrap || true
    docker buildx use event-puller-builder

    # Build and push for multiple platforms
    docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --tag {{registry}}/{{organization}}/{{image_name}}:{{timestamp}} \
        --tag {{registry}}/{{organization}}/{{image_name}}:latest \
        --push \
        .

    # Clean up
    docker buildx rm event-puller-builder || true

# Run the container locally using local .env file
# Usage: 
#   just run_container                                # Use default settings
#   just env_file=custom.env run_container            # Use custom env file
#   just host_port=3000 container_port=8080 run_container  # Use custom ports
#   just debug=true run_container                     # Run with verbose debugging
run_container *args: 
    #!/usr/bin/env bash
    set -euo pipefail
    
    # Default variables
    registry="{{registry}}"
    organization="{{organization}}"
    image_name="{{image_name}}"
    env_file="{{env_file}}"
    host_port="{{host_port}}"
    container_port="{{container_port}}"
    debug="{{debug}}"

    echo "🚀 Running event-puller in container..."

    # Check if container image exists
    if ! docker image inspect "${registry}/${organization}/${image_name}:latest" >/dev/null 2>&1; then
        echo "❌ Container image not found. Building first..."
        just build_container
    fi

    # Check for environment file
    if [ ! -f "${env_file}" ]; then
        if [ "${env_file}" = ".env" ] && [ -f ".env.example" ]; then
            echo "⚠️  No ${env_file} file found. Using .env.example as a template..."
            cp .env.example "${env_file}"
            echo "⚠️  Please edit ${env_file} file with your actual credentials"
        else
            echo "❌ Environment file ${env_file} not found and no template available"
            exit 1
        fi
    fi

    echo "📋 Press Ctrl+C to stop"
    echo "📊 Dashboard will be available at http://localhost:${host_port}"
    echo "📄 Using environment file: ${env_file}"

    # Debug output
    if [ "${debug}" = "true" ]; then
        echo "🔍 Debug info:"
        grep -v "KEY\\|SECRET\\|PASSWORD" "${env_file}" || true
        echo "  Container: ${registry}/${organization}/${image_name}:latest"
        echo "  Port mapping: ${host_port}:${container_port}"
    fi

    # Clean up existing container
    echo "🧹 Cleaning up any existing containers..."
    docker rm -f event-puller 2>/dev/null || true

    # Run the container
    echo "🐳 Starting container..."
    docker run --platform linux/amd64 \
        -p "${host_port}:${container_port}" \
        -v "$(pwd)/${env_file}:/app/.env" \
        -e ENV_FILE=/app/.env \
        --name event-puller \
        "${registry}/${organization}/${image_name}:latest" 2>&1 || true

    # Check if container exists
    if ! docker inspect event-puller >/dev/null 2>&1; then
        echo "❌ Container not found after running"
        exit 1
    fi

    # Show container logs
    echo "📋 Container logs:"
    docker logs event-puller 2>&1 || true

    # Get container exit code
    EXIT_CODE=$(docker inspect event-puller | jq -r '.[0].State.ExitCode')
    if [ "$EXIT_CODE" = "0" ]; then
        echo "✅ Container exited successfully"
    else
        echo "❌ Container exited with code $EXIT_CODE"
        docker rm event-puller 2>/dev/null || true
        exit "$EXIT_CODE"
    fi

    # Clean up
    docker rm event-puller 2>/dev/null || true

# Push the container to registry
push_container:
    @echo "🚢 Pushing container to registry..."
    docker push "{{registry}}/{{organization}}/{{image_name}}:{{timestamp}}"
    docker push "{{registry}}/{{organization}}/{{image_name}}:latest"
    @echo "✅ Container pushed to registry"

# Build the Next.js dashboard
build_dashboard:
    @echo "📊 Building dashboard..."
    @if [ ! -d "dashboard" ] || [ ! -f "dashboard/package.json" ]; then \
        echo "❌ Dashboard directory or package.json not found"; \
        exit 1; \
    fi
    cd dashboard && npm install && npm run build
    @echo "✅ Dashboard built"

# Run the dashboard in development mode
dev_dashboard:
    @echo "🚀 Running dashboard in development mode..."
    @if [ ! -d "dashboard" ] || [ ! -f "dashboard/package.json" ]; then \
        echo "❌ Dashboard directory or package.json not found"; \
        exit 1; \
    fi
    cd dashboard && npm install && npm run dev

test:
    #!/usr/bin/env bash
    # Get container exit code
    EXIT_CODE=$(docker inspect event-puller | jq '.[0].State.ExitCode')
    if [ "$EXIT_CODE" = "0" ]; then \
        echo "✅ Container exited successfully"; \
        exit 0; \
    else \
        echo "❌ Container exited with code $EXIT_CODE"; \
        docker rm event-puller; \
        exit $EXIT_CODE; \
    fi