x-common-env-variables: &common-env-variables
  NETWORK_AUTH_TOKEN: "i_am_very_secret_token"
  BACALHAU_API_PORT: "1234"
  MINIO_ROOT_USER: "minioadmin"
  MINIO_ROOT_PASSWORD: "minioadminpass"
  AWS_ACCESS_KEY_ID: "minioadmin"
  AWS_SECRET_ACCESS_KEY: "minioadminpass"
  BACALHAU_UPDATECONFIG_INTERVAL: "0"
  BACALHAU_DISABLEANALYTICS: false
  BACALHAU_MINIO_NODE_HOST: 'minio-node-us1'

networks:
  bacalhau-network:
    driver: bridge

services:
  minio-node-us1:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - bacalhau-network
    environment: *common-env-variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 1s
      timeout: 5s
      retries: 30
      start_period: 2s

  minio-node-eu1:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - bacalhau-network
    environment: *common-env-variables
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 1s
      timeout: 5s
      retries: 30
      start_period: 2s

  bacalhau-container-img-registry-node:
    build:
      context: .
      dockerfile: Dockerfile-DockerImageRegistryNode
    restart: always
    networks:
      - bacalhau-network
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /var/lib/registry
      REGISTRY_HTTP_ADDR: "0.0.0.0:5000"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/bacalhau-container-img-registry-node.crt"
      REGISTRY_HTTP_TLS_KEY: "/certs/bacalhau-container-img-registry-node.key"
    healthcheck:
      test: [ "CMD-SHELL", "nc -zv localhost 5000" ]
      interval: 1s
      timeout: 5s
      retries: 30
      start_period: 2s

  demo-init:
    build:
      context: .
      dockerfile: Dockerfile-JumpboxNode
    privileged: true
    depends_on:
      minio-node-us1:
        condition: service_healthy
      minio-node-eu1:
        condition: service_healthy
      bacalhau-container-img-registry-node:
        condition: service_healthy
    environment: *common-env-variables
    networks:
      - bacalhau-network
    entrypoint: |
      /bin/sh -c "
      # Wait for MinIO to be ready      
      mc alias set minio-eu1 http://minio-node-eu1:9000 minioadmin minioadminpass
      mc alias set minio-us1 http://minio-node-us1:9000 minioadmin minioadminpass
      
      # Create buckets
      mc admin info minio-eu1
      mc mb --ignore-existing minio-eu1/confidential-memos-bucket-eu
      mc admin info minio-us1
      mc mb --ignore-existing minio-us1/anonymized-memos-bucket-us
      
      # Copy initial data
      mc cp --recursive /bacalhau_demo_assets/test-data/confidential-memos minio-eu1/confidential-memos-bucket-eu/
      
      # Starting Docker to build the job image
      dockerd-entrypoint.sh &

      # Wait for Docker daemon with timeout
      timeout 30s sh -c 'until docker info > /dev/null 2>&1; do echo Waiting_for_Docker_daemon; sleep 1; done'
      
      if [ $? -ne 0 ]; then
          echo 'Timed out waiting for Docker daemon'
          exit 1
      fi
      
      # Build container Image for bacalhau jobs
      cd /bacalhau_demo_assets/job-dockerfiles
      docker build -t presdio-bacalhau:1 -f Dockerfile-Presdio-Enabled . 
      docker image tag presdio-bacalhau:1 bacalhau-container-img-registry-node:5000/presdio-bacalhau:1
      docker push bacalhau-container-img-registry-node:5000/presdio-bacalhau:1
      
      echo "done pushing image"
      exit 0
      "

  bacalhau-orchestrator-node:
    build:
      context: .
      dockerfile: Dockerfile-OrchestratorNode
    networks:
      - bacalhau-network
    environment: *common-env-variables
    depends_on:
      minio-node-us1:
        condition: service_healthy
    privileged: true
    command:
      - /bin/bash
      - -c
      - |
        bacalhau serve --config=/bacalhau_demo_assets/nodes_configs/1_orchestrator_config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "nc -zv localhost 1234" ]
      interval: 1s
      timeout: 5s
      retries: 30
      start_period: 2s

  bacalhau-compute-node:
    build:
      context: .
      dockerfile: Dockerfile-ComputeNode
    privileged: true
    deploy:
      replicas: 2
    command:
      - /bin/bash
      - -c
      - |
        /bacalhau_demo_assets/compute_node_image_setup.sh -c "/bacalhau_demo_assets/nodes_configs/2_compute_config.yaml"
    networks:
      - bacalhau-network
    depends_on:
      bacalhau-orchestrator-node:
        condition: service_healthy
      bacalhau-container-img-registry-node:
        condition: service_healthy
    environment:
      <<: *common-env-variables
      ORCHESTRATOR_NODE_LINK: 'bacalhau-orchestrator-node'
    healthcheck:
      test: [ "CMD-SHELL", "nc -zv localhost 1234" ]
      interval: 1s
      timeout: 5s
      retries: 30
      start_period: 2s

  bacalhau-jumpbox-node:
    build:
      context: .
      dockerfile: Dockerfile-JumpboxNode
    privileged: true
    restart: unless-stopped
    networks:
      - bacalhau-network
    depends_on:
      bacalhau-orchestrator-node:
        condition: service_healthy
      bacalhau-compute-node:
        condition: service_healthy
      bacalhau-container-img-registry-node:
        condition: service_healthy
    environment:
      <<: *common-env-variables
      BACALHAU_API_HOST: 'bacalhau-orchestrator-node'
      BACALHAU_COMPUTE_NODE_HOST: 'bacalhau-compute-node'
