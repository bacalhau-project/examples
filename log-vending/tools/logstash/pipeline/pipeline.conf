input {
  file {
    path => "${LOG_PATH:/app/logs/application.log}"
    start_position => "end"
    sincedb_path => "${CHECKPOINT_PATH:/app/state/checkpoint.pos}"
    codec => "plain"
    tags => ["raw_log"]
  }
}

filter {
  grok {
    match => {
      "message" => "%{IP:remote_addr} - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"%{WORD:http_method} %{DATA:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:status} %{NUMBER:body_bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\""
    }
  }

  date {
    match => [ "time_local", "dd/MMM/yyyy:HH:mm:ss Z" ]
    target => "@timestamp"
  }

  # Clone the event to be able to delive the raw log to S3, and the aggregated log to Elasticsearch
  clone {
    clones => ["raw_log"]
    add_tag => ["_aggregate"]
  }

  # Aggregate the logs
  if "_aggregate" in [tags] {

    # Drop the raw log tag
    mutate {
      remove_tag => ["raw_log"]
    }

    # Add geoip information
    geoip {
      source => "remote_addr"
      target => "geoip"
      fields => ["LOCATION", "COUNTRY_CODE2", "CITY_NAME"]
    }

    useragent {
      source => 'http_user_agent'
      target => 'user_agent'
    }
    
    # Normalize request paths to enhance aggregation
    ruby {
      path => "/logstash/filters/01-normalize_request.rb"
    }

    # Aggregate the data
    ruby {
      path => "/logstash/filters/02-aggregate.rb"
      script_params => { "duration" => "${AGGREGATE_DURATION:30}" }
    }

    # Sort the aggregated data and only keep the top 10 of each attribute
    ruby {
      path => "/logstash/filters/03-sort_and_output.rb"
      script_params => { 
        "min_count" => 3
        "limit" => 10 
      }
    }

    # Add the hour of the day to the event which is useful for visualizations
    ruby {
      code => "
        event.set('[hour_of_day]', Time.at(event.get('@timestamp').to_i).hour)
      "
    }
  }
}

output {
  if "_aggregated_stats" in [tags] {
    opensearch {
      hosts => ["${OPENSEARCH_ENDPOINT}"]
      index => "aggregated-stats-%{+YYYY.MM.dd}"
      auth_type => {
        type => "${OS_AUTH_TYPE:aws_iam}"
        region => "${AWS_REGION:}"
        user => "${OS_BASIC_AUTH_USER:}"
        password => "${OS_BASIC_AUTH_PASS:}"
      }
    }     
    

  } else if "_aggregated_geoip" in [tags] {
    opensearch {
      hosts => ["${OPENSEARCH_ENDPOINT}"]
      index => "aggregated-geoip-%{+YYYY.MM.dd}"
      template => "/logstash/templates/geoip.json"
      template_name => "aggregated-geoip"
      template_overwrite => true
      auth_type => {
        type => "${OS_AUTH_TYPE:aws_iam}"
        region => "${AWS_REGION:}"
        user => "${OS_BASIC_AUTH_USER:}"
        password => "${OS_BASIC_AUTH_PASS:}"
      }
    }

  } else if "raw_log" in [tags] {
    s3 {
      bucket => "${S3_BUCKET}"
      prefix => "${S3_PREFIX:%{+YYYY/MM/dd/HH}}"
      region => "${AWS_REGION}"
      time_file => 60
      rotation_strategy => "time"
      encoding => "gzip"
    }
  }
}