version: "3"
name: bacalhau-network

x-common-env-variables: &common-env-variables
  BACALHAU_DISABLEANALYTICS: true
  LOG_LEVEL: info

# Common logging configuration to disable logs
x-logging-driver: &logging-driver
  logging:
    driver: "none"

services:
  orchestrator:
    image: ghcr.io/bacalhau-project/bacalhau:latest
    hostname: orchestrator
    command: serve -c /etc/bacalhau/config.yaml --name orchestrator
    environment: *common-env-variables
    # Using host network mode for best performance
    network_mode: "host"
    volumes:
      - ./network-config/orchestrator.yaml:/etc/bacalhau/config.yaml
    deploy:
      resources:
        reservations:
          cpus: "2.0"
          memory: "4G"
    healthcheck:
      test: ["CMD", "bacalhau", "agent", "alive"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 15s
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    # Orchestrator keeps logging enabled

  nodes:
    image: ghcr.io/bacalhau-project/bacalhau:latest-dind
    privileged: true
    command: serve -c /etc/bacalhau/config.yaml
    volumes:
      - ./network-config/compute.yaml:/etc/bacalhau/config.yaml
      - ./docker-config/daemon.json:/etc/docker/daemon.json
    environment:
      <<: *common-env-variables
    depends_on:
      orchestrator:
        condition: service_healthy
    networks:
      - bacalhau-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    dns:
      - 1.1.1.1
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
  #    <<: *logging-driver

  client:
    image: ghcr.io/bacalhau-project/bacalhau:latest
    entrypoint: /bin/sh
    stdin_open: true
    tty: true
    stop_signal: SIGTERM
    stop_grace_period: 3s
    environment:
      <<: *common-env-variables
      # Point to orchestrator on host network
      BACALHAU_API_HOST: "host.docker.internal"
    depends_on:
      - orchestrator
    networks:
      - bacalhau-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    <<: *logging-driver

  registry-proxy:
    image: registry:2
    ports:
      - "5000:5000"
    volumes:
      - registry-data:/var/lib/registry
    networks:
      - bacalhau-network

  minio:
    image: quay.io/minio/minio:RELEASE.2024-05-27T15-15-20Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web console
    volumes:
      - minio-data:/data
    networks:
      - bacalhau-network

  spark-master:
    image: bitnami/spark:3.5
    depends_on: [minio]
    environment:
      - SPARK_MODE=master
      - SPARK_DAEMON_MEMORY=1G
      - SPARK_EXTRA_CLASSPATH=/opt/delta/jars/*
    volumes:
      - ../../tools/local-lakehouse/spark/conf:/opt/bitnami/spark/conf:ro
      - ../../tools/local-lakehouse/spark/jars:/opt/delta/jars:ro
    networks:
      - bacalhau-network

  spark-worker:
    image: bitnami/spark:3.5
    depends_on: [spark-master]
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_EXTRA_CLASSPATH=/opt/delta/jars/*
    volumes:
      - ../../tools/local-lakehouse/spark/jars:/opt/delta/jars:ro
    networks:
      - bacalhau-network

  notebook:
    image: jupyter/pyspark-notebook:spark-3.5.0
    depends_on: [spark-master, minio]
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
      DELTA_SPARK_MASTER: spark://spark-master:7077
      DELTA_STORAGE_URI: s3a://bacalhau-local
    volumes:
      - ../../tools/local-lakehouse/notebooks:/home/jovyan/work
      - ../../tools/local-lakehouse/spark/jars:/opt/delta/jars:ro
    networks:
      - bacalhau-network

  databricks:
    image: databricksruntime/community:latest
    ports:
      - "8080:8080"
    volumes:
      - ./notebooks:/root/notebooks
    environment:
      - DATABRICKS_HOST=localhost
    networks:
      - bacalhau-network

networks:
  bacalhau-network:
    ipam:
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  registry-data:
  minio-data: {}


x-common-env-variables: &common-env-variables
  MINIO_ROOT_USER: "Willow_Hauck"
  MINIO_ROOT_PASSWORD: "zyMa_wA4_qFxEuV"
  AWS_ACCESS_KEY_ID: "Willow_Hauck"
  AWS_SECRET_ACCESS_KEY: "zyMa_wA4_qFxEuV"
  BACALHAU_DISABLEANALYTICS: true
  POSTGRES_USER: "${POSTGRES_USER:?POSTGRES_USER must be set. Please provide it in your .env file or shell environment.}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set. Please provide it in your .env file or shell environment.}"
  FERRETDB_URI: "mongodb://${POSTGRES_USER}:${POSTGRES_PASSWORD}@ferretdb:27017/postgres"
  NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: "${GOOGLE_MAPS_API_KEY:?GOOGLE_MAPS_API_KEY must be set. Please provide it in your .env file or shell environment.}"

x-sensor-template: &sensor-template
  image: ghcr.io/bacalhau-project/bacalhau:v1.7.0-dind
  platform: linux/amd64
  entrypoint: "/usr/local/bin/entrypoint.sh sh -c"
  command: >
    "env >> /etc/environment &&
    mkdir -p /mnt/data &&
    bacalhau serve -c /etc/bacalhau/config.yaml"
  depends_on:
    orchestrator:
      condition: service_healthy
    storage:
      condition: service_healthy
    ferretdb:
      condition: service_started
  privileged: true
  restart: on-failure
  volumes:
    - ./bacalhau-config/compute.yaml:/etc/bacalhau/config.yaml
    - ./docker-config/daemon.json:/etc/docker/daemon.json
  dns:
    - 1.1.1.1
  networks:
    - ferret-demo-net

services:
  registry-proxy:
    image: registry:2
    platform: linux/amd64
    container_name: ferret-demo-registry-proxy
    ports:
      - "5001:5000"
    volumes:
      - ./registry-data:/var/lib/registry
    networks:
      - ferret-demo-net

  orchestrator:
    image: ghcr.io/bacalhau-project/bacalhau:v1.7.0
    platform: linux/amd64
    container_name: ferret-demo-orchestrator
    command: serve -c /etc/bacalhau/config.yaml --name orchestrator
    environment: *common-env-variables
    ports:
      - "8438:8438"
    volumes:
      - ./bacalhau-config/orchestrator.yaml:/etc/bacalhau/config.yaml
      - ./docker-config/daemon.json:/etc/docker/daemon.json
    healthcheck:
      test: ["CMD", "bacalhau", "agent", "alive"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 15s
    networks:
      - ferret-demo-net

  postgres:
    image: ghcr.io/ferretdb/postgres-documentdb:17-0.102.0-ferretdb-2.1.0
    container_name: ferret-demo-postgres
    #     WARNING: This image is built only for x86_64 ####
    platform: linux/amd64
    restart: on-failure
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    networks:
      - ferret-demo-net

  ferretdb:
    image: ghcr.io/bacalhau-project/examples/ferretdb-demo-ferretdb:2504162218
    platform: linux/amd64
    container_name: ferret-demo-ferretdb
    restart: on-failure
    ports:
      - 27217:27017
    environment:
      - FERRETDB_POSTGRESQL_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres
    networks:
      - ferret-demo-net

  storage:
    image: ghcr.io/bacalhau-project/examples/ferretdb-demo-minio:2504162218
    platform: linux/amd64
    container_name: ferret-demo-storage
    entrypoint: sh
    command: -c 'mkdir -p /data/my-bucket && minio server /data --console-address ":9001"'
    environment: *common-env-variables
    ports:
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
    networks:
      - ferret-demo-net

  sensors:
    environment:
      <<: *common-env-variables
    <<: *sensor-template

  frontend:
    image: ghcr.io/bacalhau-project/examples/sensor-monitoring-dashboard:2505081200
    container_name: ferret-demo-frontend
    platform: linux/amd64
    environment:
      <<: *common-env-variables
    ports:
      - "3010:3000"
    depends_on:
      ferretdb:
        condition: service_healthy
    networks:
      - ferret-demo-net

  client:
    image: ghcr.io/bacalhau-project/bacalhau:v1.7.0
    platform: linux/amd64
    container_name: ferret-demo-client
    entrypoint: /bin/sh
    stdin_open: true
    tty: true
    stop_signal: SIGTERM
    stop_grace_period: 3s
    environment:
      <<: *common-env-variables
      BACALHAU_API_HOST: orchestrator
    volumes:
      - ./scripts:/scripts
      - ./jobs:/jobs
      - ./1_run_generate_sensor_logs_job.sh:/1_run_generate_sensor_logs_job.sh
      - ./2_run_sync_sensor_logs_job.sh:/2_run_sync_sensor_logs_job.sh
      - ./3_replace_sync_sensor_logs_script.sh:/3_replace_sync_sensor_logs_script.sh
      - ./4_run_cleanup_whole_mongodb_job.sh:/4_run_cleanup_whole_mongodb_job.sh
    depends_on:
      - orchestrator
    networks:
      - ferret-demo-net

networks:
  ferret-demo-net: